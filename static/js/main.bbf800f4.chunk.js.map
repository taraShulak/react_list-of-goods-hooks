{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","SORT_FIELD_NAME","Name","SORT_FIELD_LENGTH","Length","App","sortField","setSortField","React","useState","Defoult","reverse","setReverse","renderGoods","goods","prepareGoods","sort","good1","good2","length","localeCompare","getPrepareGoods","_jsxs","className","children","_jsx","type","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"2MAIKA,EAAQ,SAARA,GAAQ,OAARA,IAAQ,qBAARA,IAAQ,eAARA,IAAQ,mBAARA,CAAQ,EAARA,GAAQ,IAMN,MAAMC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAA4BF,EAASG,KACrCC,EAA8BJ,EAASK,OA+BtC,MAAMC,EAAgBA,KAC3B,MAAOC,EAAWC,GAAgBC,IAAMC,SAASV,EAASW,UACnDC,EAASC,GAAcJ,IAAMC,UAAS,GACvCI,EAhCR,SACEC,EACAR,EACAK,GAEA,IAAII,EAAe,IAAID,GAqBvB,OAnBIR,GACFS,EAAaC,MAAK,CAACC,EAAOC,KACxB,OAAQZ,GACN,KAAKH,EACH,OAAOc,EAAME,OAASD,EAAMC,OAE9B,KAAKlB,EACH,OAAOgB,EAAMG,cAAcF,GAE7B,QACE,OAAO,EACX,IAIAP,IACFI,EAAeA,EAAaJ,WAGvBI,CACT,CAKsBM,CAAgBrB,EAAiBM,EAAWK,GAOhE,OACEW,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BF,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,UACEC,KAAK,SACLH,UAAWjB,IAAcP,EAASG,KAC9B,iBACA,0BACJyB,QAASA,IAAMpB,EAAaR,EAASG,MAAMsB,SAC5C,wBAIDC,cAAA,UACEC,KAAK,SACLH,UAAWjB,IAAcP,EAASK,OAC9B,oBACA,6BACJuB,QAASA,IAAMpB,EAAaR,EAASK,QAAQoB,SAC9C,mBAIDC,cAAA,UACEC,KAAK,SACLH,UAAWZ,EACP,oBACA,6BACJgB,QAASA,IAAMf,GAAYD,GAASa,SACrC,aAICb,GAAWL,IAAcP,EAASW,UAClCe,cAAA,UACEC,KAAK,SACLH,UAAU,4BACVI,QAASA,KAzCjBf,GAAW,QACXL,EAAaR,EAASW,UAwCYc,SAC3B,aAMLC,cAAA,MAAAD,SACGX,EAAYe,KAAIC,GACfJ,cAAA,MACE,UAAQ,OAAMD,SAGbK,GAFIA,SAOP,ECrHVC,IAASC,OACPN,cAACpB,EAAG,IACJ2B,SAASC,eAAe,Q","file":"static/js/main.bbf800f4.chunk.js","sourcesContent":["import React from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nenum SortType {\n  Defoult,\n  Name,\n  Length,\n}\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_NAME: SortType = SortType.Name;\nconst SORT_FIELD_LENGTH: SortType = SortType.Length;\n\nfunction getPrepareGoods(\n  goods: string[],\n  sortField: SortType,\n  reverse: boolean,\n) {\n  let prepareGoods = [...goods];\n\n  if (sortField) {\n    prepareGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        case SORT_FIELD_NAME:\n          return good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    prepareGoods = prepareGoods.reverse();\n  }\n\n  return prepareGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = React.useState(SortType.Defoult);\n  const [reverse, setReverse] = React.useState(false);\n  const renderGoods = getPrepareGoods(goodsFromServer, sortField, reverse);\n\n  function getReset() {\n    setReverse(false);\n    setSortField(SortType.Defoult);\n  }\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={sortField === SortType.Name\n            ? 'button is-info'\n            : 'button is-info is-light'}\n          onClick={() => setSortField(SortType.Name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={sortField === SortType.Length\n            ? 'button is-success'\n            : 'button is-success is-light'}\n          onClick={() => setSortField(SortType.Length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={reverse\n            ? 'button is-warning'\n            : 'button is-warning is-light'}\n          onClick={() => setReverse(!reverse)}\n        >\n          Reverse\n        </button>\n\n        {(reverse || sortField !== SortType.Defoult) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => getReset()}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {renderGoods.map(good => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}